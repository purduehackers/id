[workspace]
members = [".", "entity", "migration"]

[package]
name = "id"
version = "0.1.0"
edition = "2021"

[features]
hydrate = ["leptos/hydrate", "dep:console_error_panic_hook", "dep:wasm-bindgen"]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:leptos_axum",
    "dep:rand",
    "dep:entity",
    "dep:migration",
    "dep:serde_json",
    "dep:oxide-auth",
    "dep:redis",
    "dep:totp-rs",
    "dep:fred",
    "dep:serde",
    "dep:url",
    "dep:form_urlencoded",
    "dep:urlencoding",
    "dep:thiserror",
    "dep:sea-orm",
    "dep:oxide-auth-async",
    "dep:chrono",
    "dep:async-trait",
    "dep:base64",
    "dep:oxide-auth-axum",

    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
]
console_error_panic_hook = ["dep:console_error_panic_hook"]
oxide-auth-axum = ["dep:oxide-auth-axum"]
bitflags = []

[dependencies]
entity = { path = "entity", optional = true }
migration = { path = "migration", optional = true } # depends on your needs
tokio = { version = "1", features = [
    "macros",
    "rt-multi-thread",
], optional = true }
serde_json = { version = "1", features = ["raw_value"], optional = true }
# Documentation: https://docs.rs/vercel_runtime/latest/vercel_runtime
# vercel_runtime = { version = "1.1.4" }
oxide-auth = { version = "0.6", optional = true }
serde = { version = "1.0.204", features = ["derive"], optional = true }
url = { version = "2.5.2", optional = true }
form_urlencoded = { version = "1.2.1", optional = true }
urlencoding = { version = "2.1.3", optional = true }
thiserror = { version = "1.0.63", optional = true }
redis = { version = "0.27.2", features = [
    "aio",
    "tokio-comp",
    "rustls",
], optional = true }
sea-orm = { version = "0.12", features = [
    "sqlx-postgres",
    "runtime-tokio-rustls",
    "with-chrono",
    "with-json",
    "macros",
], optional = true }
fred = { version = "10.1.0", features = ["enable-rustls"], optional = true }
rand = { version = "0.8.5", optional = true }
oxide-auth-async = { version = "0.2", optional = true }
chrono = { version = "0.4.38", optional = true }
async-trait = { version = "0.1.81", optional = true }
base64 = { version = "0.21.7", optional = true }
totp-rs = { version = "5.6.0", features = ["otpauth"], optional = true }
leptos = { version = "0.8.0", features = ["nightly"] }
leptos_router = { version = "0.8.0", features = ["nightly"] }
axum = { version = "0.8.0", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }
leptos_axum = { version = "0.8.0", optional = true }
leptos_meta = { version = "0.8.0" }
wasm-bindgen = { version = "=0.2.101", optional = true }
oxide-auth-axum = { version = "0.6", optional = true }

# You can specify a library for shared logic here (optional)
[lib]
crate-type = ["cdylib", "rlib"]
path = "src/lib.rs"

# Each handler has to be specified as [[bin]]
# [[bin]]
# name = "authorize"
# path = "api/authorize.rs"
# [[bin]]
# name = "token"
# path = "api/token.rs"
# [[bin]]
# name = "scan"
# path = "api/scan.rs"
# [[bin]]
# name = "new"
# path = "api/new.rs"
# [[bin]]
# name = "door"
# path = "api/door.rs"
# [[bin]]
# name = "passport"
# path = "api/passport.rs"
# [[bin]]
# name = "passport-id"
# path = "api/passport/[id].rs"
# [[bin]]
# name = "user"
# path = "api/user.rs"
# [[bin]]
# name = "client"
# path = "api/client.rs"

# Note that you need to provide unique names for each binary:
# [[bin]]
# name = "user-id"
# path = "api/user/[id].rs"
#
# [[bin]]
# name = "group-id"
# path = "api/group/[id].rs"

[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "{{project-name}}"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
