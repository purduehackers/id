//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "passport")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub owner_id: i32,
    pub version: i32,
    pub surname: String,
    pub name: String,
    pub date_of_birth: Date,
    pub date_of_issue: Date,
    pub place_of_origin: String,
    pub secret: String,
    pub activated: bool,
    pub ceremony_time: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ceremonies::Entity",
        from = "Column::CeremonyTime",
        to = "super::ceremonies::Column::CeremonyTime",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Ceremonies,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::OwnerId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::ceremonies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ceremonies.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
